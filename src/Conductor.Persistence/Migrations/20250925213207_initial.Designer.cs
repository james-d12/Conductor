// <auto-generated />
using System;
using Conductor.Persistence;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Conductor.Persistence.Migrations
{
    [DbContext(typeof(ConductorDbContext))]
    [Migration("20250925213207_initial")]
    partial class initial
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "10.0.0-rc.1.25451.107");

            modelBuilder.Entity("Conductor.Core.Application.Domain.Application", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.ToTable("Applications");
                });

            modelBuilder.Entity("Conductor.Core.Deployment.Domain.Deployment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<string>("CommitId")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("EnvironmentId");

                    b.HasIndex("ApplicationId", "EnvironmentId", "CommitId", "Status")
                        .IsUnique();

                    b.ToTable("Deployments");
                });

            modelBuilder.Entity("Conductor.Core.Environment.Domain.Environment", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("Environments");
                });

            modelBuilder.Entity("Conductor.Core.Resource.Resource", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ApplicationId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.Property<Guid>("EnvironmentId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ResourceTemplateId")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("ApplicationId", "EnvironmentId", "ResourceTemplateId");

                    b.ToTable("Resource");
                });

            modelBuilder.Entity("Conductor.Core.ResourceTemplate.Domain.ResourceTemplate", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CreatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Provider")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UpdatedAt")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("TEXT")
                        .HasDefaultValueSql("now()");

                    b.HasKey("Id");

                    b.HasIndex("Name")
                        .IsUnique();

                    b.ToTable("ResourceTemplates");
                });

            modelBuilder.Entity("Conductor.Core.Application.Domain.Application", b =>
                {
                    b.OwnsOne("Conductor.Core.Application.Domain.Repository", "Repository", b1 =>
                        {
                            b1.Property<Guid>("ApplicationId")
                                .HasColumnType("TEXT");

                            b1.Property<Guid>("Id")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Provider")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<string>("Url")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.HasKey("ApplicationId");

                            b1.ToTable("Applications");

                            b1.WithOwner()
                                .HasForeignKey("ApplicationId");
                        });

                    b.Navigation("Repository")
                        .IsRequired();
                });

            modelBuilder.Entity("Conductor.Core.Deployment.Domain.Deployment", b =>
                {
                    b.HasOne("Conductor.Core.Application.Domain.Application", null)
                        .WithMany()
                        .HasForeignKey("ApplicationId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Conductor.Core.Environment.Domain.Environment", null)
                        .WithMany()
                        .HasForeignKey("EnvironmentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Conductor.Core.ResourceTemplate.Domain.ResourceTemplate", b =>
                {
                    b.OwnsMany("Conductor.Core.ResourceTemplate.Domain.ResourceTemplateVersion", "Versions", b1 =>
                        {
                            b1.Property<Guid>("TemplateId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Version")
                                .HasColumnType("TEXT");

                            b1.Property<DateTime>("CreatedAt")
                                .ValueGeneratedOnAdd()
                                .HasColumnType("TEXT")
                                .HasDefaultValueSql("now()");

                            b1.Property<string>("Notes")
                                .IsRequired()
                                .HasColumnType("TEXT");

                            b1.Property<int>("State")
                                .HasColumnType("INTEGER");

                            b1.HasKey("TemplateId", "Version");

                            b1.HasIndex("TemplateId", "Version")
                                .IsUnique();

                            b1.ToTable("ResourceTemplateVersion");

                            b1.WithOwner()
                                .HasForeignKey("TemplateId");

                            b1.OwnsOne("Conductor.Core.ResourceTemplate.Domain.ResourceTemplateVersionSource", "Source", b2 =>
                                {
                                    b2.Property<Guid>("ResourceTemplateVersionTemplateId")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("ResourceTemplateVersionVersion")
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("BaseUrl")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("FolderPath")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.Property<string>("Tag")
                                        .IsRequired()
                                        .HasColumnType("TEXT");

                                    b2.HasKey("ResourceTemplateVersionTemplateId", "ResourceTemplateVersionVersion");

                                    b2.ToTable("ResourceTemplateVersion");

                                    b2.WithOwner()
                                        .HasForeignKey("ResourceTemplateVersionTemplateId", "ResourceTemplateVersionVersion");
                                });

                            b1.Navigation("Source")
                                .IsRequired();
                        });

                    b.Navigation("Versions");
                });
#pragma warning restore 612, 618
        }
    }
}
